/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.SQLException;

/**
 *
 * @author marav
 */
public class MedAppoint extends javax.swing.JFrame {
    
    /**
     * Creates new form MedAppoint
     */
    public MedAppoint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePatients = new javax.swing.JTable();
        txtAID = new javax.swing.JTextField();
        txtDname = new javax.swing.JTextField();
        txtPname = new javax.swing.JTextField();
        txtAD = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Create = new javax.swing.JButton();
        txtSp = new javax.swing.JTextField();
        txtCI = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        Read = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtAdd = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtEmAdd = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        tablePatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment_ID", "Contact_info", "Patient_name", "Doctor_name", "Specialization", "App_date", "Address", "Email_Add"
            }
        ));
        jScrollPane1.setViewportView(tablePatients);

        txtAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtADActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel1.setText("Appointment ID:");

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel2.setText("Patient Name:");

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel3.setText("Doctor's Name:");

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel4.setText("Appointment Date:");

        Create.setBackground(new java.awt.Color(204, 204, 255));
        Create.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        Create.setText("Create");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel5.setText("Contact Info:");

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel6.setText("Specialization:");

        Update.setBackground(new java.awt.Color(255, 204, 255));
        Update.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Read.setBackground(new java.awt.Color(255, 204, 204));
        Read.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        Read.setText("Read");
        Read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 255, 204));
        Delete.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Clear.setBackground(new java.awt.Color(204, 255, 255));
        Clear.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Vivaldi", 1, 40)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Medical Appointment System");

        jLabel8.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel8.setText("Address");

        txtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel9.setText("Email Address:");

        txtEmAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtAID, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                        .addGap(68, 68, 68))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtCI, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                                            .addComponent(txtPname, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                            .addComponent(txtDname, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                            .addComponent(txtSp, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                                            .addComponent(txtAD, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                                        .addGap(70, 70, 70))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtEmAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(jLabel6))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel4))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(43, 43, 43)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Clear)
                                .addGap(27, 27, 27)
                                .addComponent(Create, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(Update)
                                .addGap(39, 39, 39)
                                .addComponent(Read)
                                .addGap(31, 31, 31)
                                .addComponent(Delete))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(136, 136, 136)))))
                .addGap(16, 16, 16))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAD, txtAID, txtCI, txtDname, txtPname, txtSp});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Clear, Create, Delete, Read, Update});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtDname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(12, 12, 12)
                        .addComponent(txtAD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Create, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Update)
                            .addComponent(Read)
                            .addComponent(Clear)
                            .addComponent(Delete)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Clear, Create, Delete, Read, Update});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        // TODO add your handling code here:
        Connection conn = DBConnection.getConnection();
        if(conn !=null);
        try{
        
         String appointment_id = txtAID.getText();
        String contact_info = txtCI.getText();
        String patient_name = txtPname.getText();
        String doctor_name = txtDname.getText();
        String specialization = txtSp.getText();
        String appointment_date = txtAD.getText();
        String Address = txtAdd.getText();
        String Email_Address = txtEmAdd.getText();

    // Input Validation
    if (appointment_id.isEmpty() || contact_info.isEmpty()|| patient_name.isEmpty() || doctor_name.isEmpty() || specialization.isEmpty()|| appointment_date.isEmpty() || Address.isEmpty() ||Email_Address.isEmpty()) {
        JOptionPane.showMessageDialog(this,
                "Please fill in all the required fields",
                "Missing Information",
                JOptionPane.ERROR_MESSAGE);
        return;
    }

        // Prepare and execute the SQL statement
        String sql = "INSERT INTO appointments(appointment_id, contact_info, patient_name, doctor_name, specialization, appointment_date, Address, Email_Address) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement pstmt = conn.prepareStatement(sql);
        pstmt.setString(1, appointment_id);
        pstmt.setString(2, contact_info);
        pstmt.setString(3, patient_name);
        pstmt.setString(4, doctor_name);
        pstmt.setString(5, specialization);
        pstmt.setString(6, appointment_date);
        pstmt.setString(7,Address );
        pstmt.setString(8, Email_Address);

        int rowsInserted = pstmt.executeUpdate();

        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "A new Appointment was added successfully!");
            System.out.println("A new Appointment was added successfully!\n");

            // Update the table after successful database insertion
            DefaultTableModel model = (DefaultTableModel) tablePatients.getModel();
            model.addRow(new Object[]{appointment_id, contact_info, patient_name, doctor_name, specialization, appointment_date,Address,Email_Address});

            // Clear the text fields
            txtAID.setText("");
            txtCI.setText("");
            txtPname.setText("");
            txtDname.setText("");
            txtSp.setText("");
            txtAD.setText("");
            txtAdd.setText("");
            txtEmAdd.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add appointment. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        pstmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        System.out.println("SQL Error: " + e.getMessage());
    } finally {
        DBConnection.closeConnection(conn);

    }
 
    }//GEN-LAST:event_CreateActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // TODO add your handling code here:
        txtAID.setText("");
        txtCI.setText("");
        txtPname.setText("");
        txtDname.setText("");
        txtSp.setText("");
        txtAD.setText("");
        txtAdd.setText("");
        txtEmAdd.setText("");
    }//GEN-LAST:event_ClearActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        String appointment_id = txtAID.getText();
        String contact_info = txtCI.getText();
        String patient_name = txtPname.getText();
        String doctor_name = txtDname.getText();
        String specialization = txtSp.getText();
        String appointment_date = txtAD.getText();
        String Address = txtAdd.getText();
        String Email_Address = txtEmAdd.getText();
        
       

       
       
        if(appointment_id.isEmpty() || contact_info.isEmpty() || patient_name.isEmpty() || doctor_name.isEmpty() || specialization.isEmpty() || appointment_date.isEmpty() || Address.isEmpty() || Email_Address.isEmpty()){
            JOptionPane.showMessageDialog(this,
                    "Please enter all fields",
                    "Try Again!",
                    JOptionPane.ERROR_MESSAGE);
        }else {
            DefaultTableModel model = (DefaultTableModel)tablePatients.getModel();
            model.addRow(new Object[]{appointment_id, contact_info, patient_name, doctor_name, specialization, appointment_date, Address, Email_Address});
           

        Connection conn = DBConnection.getConnection();
        if(conn !=null);
        try{
           
            String sql = "UPDATE appointments SET contact_info = ?, patient_name = ?, doctor_name = ?, specialization = ?, appointment_date = ? ,Address = ?,Email_Address = ? WHERE appointment_id = ?";
           
            PreparedStatement pstmt = conn.prepareStatement(sql);
           
            pstmt.setString(1,txtCI.getText());
            pstmt.setString(2,txtPname.getText());
            pstmt.setString(3,(txtDname.getText()));
            pstmt.setString(4,txtSp.getText());
            pstmt.setString(5,txtAD.getText());
            pstmt.setString(6, txtAdd.getText() );
            pstmt.setString(7, txtEmAdd.getText());
            pstmt.setInt(8,Integer.parseInt(txtAID.getText()));
           
            int rowsUpdated = pstmt.executeUpdate();
            if(rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this,"A new Appointment was Updated successfully!");
                System.out.println("An Appointment was updated successfully!\n");
        }else{
                System.out.println("No record found with the specified ID\n");
               
            }
            pstmt.close();
        }catch (SQLException | NumberFormatException e){
		
                System.out.println("SQL Error: " + e.getMessage()) ;
        }finally{
            DBConnection.closeConnection(conn);
        }
       
           
           
        }

        
    }//GEN-LAST:event_UpdateActionPerformed

    private void ReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadActionPerformed
        // TODO add your handling code here:
         Connection conn =DBConnection.getConnection();
        if(conn !=null);
            try{
                String sql;
                PreparedStatement pstmt;
               
                if(txtAID.getText().trim().isEmpty()){
                    sql = "SELECT * FROM appointments";
                    pstmt = conn.prepareStatement(sql);
                   
                }else{
                   
                    sql = "SELECT * FROM appointments WHERE appointment_id = ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setInt(1,Integer.parseInt(txtAID.getText()));
                }
               
                ResultSet rs = pstmt.executeQuery();
               
                DefaultTableModel model = (DefaultTableModel)tablePatients.getModel();
                model.setRowCount(0);
               
                while(rs.next()){
                   
                    int appointment_id = rs.getInt("appointment_id");
                    String contact_info = rs.getString("contact_info");
                    String patient_name = rs.getString("patient_name");
                    String doctor_name= rs.getString("doctor_name");
                    String specialization = rs.getString("specialization");
                    String appointment_date = rs.getString("appointment_date");
                    String Address = rs.getString("Address");
                    String Email_Address = rs.getString("Email_Address");
                   
                    model.addRow(new Object[]{appointment_id, contact_info, patient_name, doctor_name, specialization, appointment_date, Address, Email_Address});
                   
                }
                rs.close();
                pstmt.close();
               
            }catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("SQL Error: " + e.getMessage());
            }finally {
                DBConnection.closeConnection(conn);
            }


    }//GEN-LAST:event_ReadActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        Connection conn = DBConnection.getConnection();
        if(conn !=null){
           
        try{
           
            String sql = "DELETE FROM appointments WHERE appointment_id = ?";
           
            PreparedStatement pstmt = conn.prepareStatement(sql);
           
            pstmt.setInt(1,Integer.parseInt(txtAID.getText()));
           
            int rowsDeleted = pstmt.executeUpdate();
            if(rowsDeleted > 0){
                System.out.println("An Appointment was deleted successfully!");
               
        }    else {
                System.out.println("No record found with the specified ID");
                }
            pstmt.close();
       
        }catch(SQLException e){
            System.out.println("SQL Error: " + e.getMessage());
        }finally{
            DBConnection.closeConnection(conn);
        }
       
        int row = tablePatients.getSelectedRow();
       
        if(row < 0){
            JOptionPane.showMessageDialog(this,
                    "No row is selected! Please Select a row"
                    ,"Select row",
                    JOptionPane.ERROR_MESSAGE);
}else{
            DefaultTableModel model = (DefaultTableModel)tablePatients.getModel();
            model.removeRow(row);
    }        
        }            
    }//GEN-LAST:event_DeleteActionPerformed

    private void txtADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtADActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtADActionPerformed

    private void txtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtAddActionPerformed

    private void txtEmAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmAddActionPerformed
        // TODO add your handling code here:    
    }//GEN-LAST:event_txtEmAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MedAppoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MedAppoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MedAppoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MedAppoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MedAppoint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Clear;
    private javax.swing.JButton Create;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Read;
    private javax.swing.JButton Update;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tablePatients;
    private javax.swing.JTextField txtAD;
    private javax.swing.JTextField txtAID;
    private javax.swing.JTextField txtAdd;
    private javax.swing.JTextField txtCI;
    private javax.swing.JTextField txtDname;
    private javax.swing.JTextField txtEmAdd;
    private javax.swing.JTextField txtPname;
    private javax.swing.JTextField txtSp;
    // End of variables declaration//GEN-END:variables
}
